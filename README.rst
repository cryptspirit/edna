Что это за проект?
==================

Это двухпанельный файловый менеджер написанный на языке программирования Python версии 2.6 и выше с использованием фреймворка Gtk 2 для unix-подобных операционных систем.

Лицензия
========

Распространяется на основе общественной лицензии GPL версии 2 и выше

Описание
========

Существует большое количество двухпанельных файловых менеджеров. Небольшая часть их припадает на unix-подобные операционные системы. Еще меньшая часть реализована на Gtk. На данный момент автору кажется что "нормального" удобного файлового менеджера (с двумя панелями) попадающего под эти критерии не существует.

Цели
====

Основная цель это простой, настраиваемый файловый менеджер, который хорошо интегрируется в среду рабочего стола Gnome и подобных ему DE.

* Как можно более полная настройка. С использованием графического интерфейса так и с возможностью правки конфигурационного файла.

* До первого релиза использовать как можно меньше модулей не входящих в стандартную поставку Python-а. для уменьшения числа зависимостей.

* Гибкая и разнообразная система выделения и группового запуска файлов по ассоциациям. Основной проблемой некоторых файловых менеджеров (например, tux commander) является выделение элементов списка. Для запуска группы элементов необходимо их просто выделить и нажать клавишу Enter (не щелчок мышью). 
файловый менеджер сам распределяет все файлы по ассоциациям и перенаправляет их на приложения либо сразу весь список, либо запускает каждый раз с новым файлом. То есть выделение тоже должно быть "функциональным" и иметь  расширенные настройки.

* Использования системных (XDG) mime-type для определения иконок и ассоциаций файлов с возможностью правок ассоциаций и добавления своих настроек на уровне приложения без изменения системных настроек. Дело в том, что тоже узкое место подобных файловых менеджеров и на данный момент более или менее нормально с этим справляется Gnome Commander (но и у него в этом деле есть проблемы). Среда рабочего стола должная выглядеть монолитно и так же должна работать. Ассоциации файлов это первая ступень этого единства. 

* Возможность создания плагинов и расширения на языке программирования Python. Это означает предоставить возможность простой и понятной разработки и внедрения различных плагинов без изменения исходного кода под разные требование.

* С самого начала отказ от виртуального терминала в пользу плотной интеграции с указанным в настройках терминалом. С возможностью пользовательской настройки ключей передаваемых терминалу при каждом из действий.

* Создание процедур копирования, перемещения и удаления с использование "фонового" режима. Необходимо скопировать решение веб браузеров с использование интеграции фоновой операции в главное окно под видом панели операций либо какого не будь гаджета.

* Максимальная "информативность". В большинстве операций и действий отображать как можно больше информации об объекте, над которым это действие происходит. Например, при возникновении ошибки чтения окно, которое сообщит об этой ошибке, выводит подробную информацию об этом объекте. Таким образом, пользователь может уже в первые секунды определить причину ошибки.

* Каждая пользовательская операция или функция могут иметь одну комбинацию клавиш (с возможность изменения абсолютно всех горячих клавиш). Что позволяет быстро выполнять постоянные действия.

* Возможность монтировать устройства без прав суперпользователя.

Соглашения
==========

1. Панелей (списки файлов) всегда две и их ориентация вертикальная. Панели одинаковой ширины.

2. Настройка размера столбцов списка файлов выполняется только в окне настроек.

3. При масштабировании окно не должно скрывать свои виджеты. Информация в окне (особенно списки файлов) при масштабировании должна отображается полностью без искажения.

4. Отсутствие автомонтирования устройств.

5. Большая часть текста проекта должна быть выполнена на языке программирования Python. Если в бедующем и появиться необходимость в использовании других языков они не могут быть использованы для построения графических интерфейсов.

6. Для построения графических интерфейсов не использовать дизайнеры графических интерфейсов (например Glade). Все построение GUI должно быть описано на языке программирования Python.

5. Язык графического интерфейса по умолчанию английский. Перевод на русский язык (либо другие языки) идет параллельно в основном репозитории.

6. Каждая функция, класс или процедура должны содержать строки документации.

В бедующем есть возможность пересмотра этих пунктов

Как помочь?
===========

Достаточно хотя бы предложений по развитию проекта. Возможны комментарии и критика.

Как стать участником проекта?
=============================

1. Для начала, вам `нужно сделать Fork <http://help.github.com/forking/>`_
текущего `репозитория <https://github.com/cryptspirit/edna>`_

2. В своем репозитории ввести изменения, которые вам кажутся актуальными, но не нарушают соглашения и отвечают целям проекта. Эти изменения могут и не отвечать целям проекта (но придерживаться соглашения) хотя в таком случае шанс добавления ваших изменений в проект небольшой.

4. Когда вы закончили правки, из нужной ветки ``branch``
`сделайте Pull Request <http://help.github.com/pull-requests/>`_

Ссылки
======

`Официальная страница проекта <https://sites.google.com/site/gtkdfm/>`_
`Проект на github.com <https://github.com/cryptspirit/edna/>`_

Контакты
========

cryptspirit@gmail.com
